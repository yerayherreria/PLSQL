--Previamente deberemos crear una tabla AUDITORIA_EMPLEADOS para registrar los
--eventos a auditar que ocurran sobre la tabla EMPLEADOS.
CREATE TABLE AUDITORIA_EMPLEADOS (descripcion VARCHAR2(200));
--Y también crearemos una vista SEDE_DEPARTAMENTOS acerca de los departamentos y
--su localización.
CREATE VIEW SEDE_DEPARTAMENTOS AS
SELECT C.NUMCE, C.NOMCE, C.DIRCE,
D.NUMDE, D.NOMDE, D.PRESU, D.DIREC, D.TIDIR, D.DEPDE
FROM CENTROS C JOIN DEPARTAMENTOS D ON C.NUMCE=D.NUMCE;
--También insertaremos en la tabla DEPARTAMENTOS uno llamado TEMP donde serán
--movidos los empleados cuyo departamento desaparezca.
INSERT INTO DEPARTAMENTOS VALUES (0, 10, 260, 'F', 10, 100, 'TEMP');

--5.7.1. Crea un trigger que, cada vez que se inserte o elimine un empleado, registre
--una entrada en la tabla AUDITORIA_EMPLEADOS con la fecha del suceso,
--número y nombre de empleado, así como el tipo de operación realizada
--(INSERCIÓN o ELIMINACIÓN).
CREATE OR REPLACE
TRIGGER REGISTRO_EMP
	AFTER INSERT OR DELETE ON EMPLEADOS
	FOR EACH ROW
BEGIN
	IF INSERTING THEN
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || ' - INSERCIÓN - '
		|| :new.NUMEM || ' ' || :new.NOMEM );
	ELSIF DELETING THEN
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || ' - ELIMINACIÓN - '
		|| :old.NUMEM || ' ' || :old.NOMEM );
END IF;
END REGISTRO_EMP;
--PRUEBA
INSERT INTO EMPLEADOS (NUMEM,EXTEL,FECNA,FECIN,SALAR,COMIS,NUMHI,NOMEM,NUMDE)
VALUES (999,111,SYSDATE,SYSDATE,111,111,2,'CURRO',100);

SELECT * FROM AUDITORIA_EMPLEADOS ae;

--5.7.2. Crea un trigger que, cada vez que se modi(quen datos de un empleado,
--registre una entrada en la tabla AUDITORIA_EMPLEADOS con la fecha del
--suceso, valor antiguo y valor nuevo de cada campo, así como el tipo de operación
--realizada (en este caso MODIFICACIÓN).
/*CREATE OR REPLACE TRIGGER MODIF
	AFTER UPDATE ON EMPLEADOS
	FOR EACH ROW
BEGIN
	IF UPDATING('NUNEM') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.NUMEM || ' ' || :NEW.NUMEM );
	ELSIF UPDATING('EXTEL') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.EXTEL || ' ' || :NEW.EXTEL );
	ELSIF UPDATING('FECNA') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.FECNA || ' ' || :NEW.FECNA );
	ELSIF UPDATING('FECNI') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.FECNI || ' ' || :NEW.FECNI );
	ELSIF UPDATING('SALAR') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.SALAR || ' ' || :NEW.SALAR );
	ELSIF UPDATING('COMIS') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.COMIS || ' ' || :NEW.COMIS );
	ELSIF UPDATING('NUMHI') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.NUMHI || ' ' || :NEW.NUMHI );
	ELSIF UPDATING('NOMEM') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.NOMEM || ' ' || :NEW.NOMEM );
	ELSIF UPDATING('NUMDE') THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :OLD.NUMDE || ' ' || :NEW.NUMDE );
	END IF;
END REGISTRO_EMP;*/
CREATE OR REPLACE TRIGGER 
CONTROL_UPDATE
AFTER UPDATE ON EMPLEADOS 
FOR EACH ROW 
BEGIN 
    INSERT INTO AUDITORIA_EMPLEADOS 
    VALUES (TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS')||:OLD.NUMEM||:OLD.EXTEL||:OLD.FECNA||:OLD.FECIN 
    ||:OLD.SALAR||:OLD.COMIS||:OLD.NUMHI||:OLD.NOMEM||:OLD.NUMDE 
    ||:NEW.NUMEM||:NEW.EXTEL||:NEW.FECNA||:NEW.FECIN 
    ||:NEW.SALAR||:NEW.COMIS||:NEW.NUMHI||:NEW.NOMEM||:NEW.NUMDE || 'UPDATE' );
END CONTROL_UPDATE;
--PRUEBA
UPDATE EMPLEADOS  
SET NUMEM =3
WHERE NUMEM =130;

SELECT * FROM AUDITORIA_EMPLEADOS;

--5.7.3. Crea un trigger para que registre en la tabla AUDITORIA_EMPLEADOS las
--subidas de salarios superiores al 5%.
CREATE OR REPLACE 
TRIGGER SALARIO_SUPERIOR
	AFTER UPDATE ON EMPLEADOS 
	FOR EACH ROW
BEGIN 
	IF :NEW.SALAR > :OLD.SALAR*1.05 THEN 
		INSERT INTO AUDITORIA_EMPLEADOS
		VALUES(TO_CHAR(SYSDATE,'DD/MM/YYYY HH:MI:SS') || :NEW.NOMEM || ' ' || :NEW.SALAR ||' '||:OLD.SALAR);
	END IF;
END SALARIO_SUPERIOR;
--PRUEBA
UPDATE EMPLEADOS 
SET SALAR = SALAR*1.05
WHERE NUMEM =1;

SELECT * FROM AUDITORIA_EMPLEADOS;
--5.7.4. Deseamos operar sobre los datos de los departamentos y los centros donde
--se hallan. Para ello haremos uso de la vista SEDE_DEPARTAMENTOS creada
--anteriormente. Al tratarse de una vista que involucra más de una tabla,
--necesitaremos crear un trigger de sustitución para gestionar las operaciones de
--actualización de la información. Crea el trigger necesario para realizar inserciones,
--eliminaciones y modi(caciones en la vista anterior.
CREATE OR REPLACE TRIGGER EMP.SEDE
    AFTER INSERT OR DELETE OR UPDATE ON EMP.DEPARTAMENTOS
    FOR EACH ROW 
BEGIN 
    IF INSERTING THEN 
        INSERT INTO EMP.SEDE_DEPARTAMENTOS (NUMCE,NUMDE,DIREC,TIDIR,PRESU,DEPDE,NOMDE)
        VALUES (:NEW.NUMCE,:NEW.NUMDE,:NEW.DIREC,:NEW.TIDIR,:NEW.PRESU,:NEW.DEPDE,:NEW.NOMDE);
    ELSIF UPDATING THEN 
        UPDATE EMP.SEDE_DEPARTAMENTOS 
        SET NUMDE=:NEW.NUMDE,NUMCE=:NEW.NUMCE,DIREC=:NEW.DIREC,TIDIR=:NEW.TIDIR,PRESU=:NEW.PRESU,DEPDE=:NEW.DEPDE,NOMDE=:NEW.NOMDE
        WHERE :OLD.NUMDE=NUMDE;
    ELSIF DELETING THEN 
        DELETE FROM EMP.SEDE_DEPARTAMENTOS 
        WHERE :OLD.NUMDE=NUMDE;
    END IF;
    COMMIT;
END;
--5.7.5. Realiza las siguientes operaciones para comprobar si el disparador anterior
--funciona correctamente.
-- Inserción de datos
INSERT INTO SEDE_DEPARTAMENTOS (NUMCE, NUMDE, NOMDE)
VALUES (30, 310, 'NUEVO1');
INSERT INTO SEDE_DEPARTAMENTOS (NUMCE, NUMDE, NOMDE)
VALUES (30, 320, 'NUEVO2');
INSERT INTO SEDE_DEPARTAMENTOS (NUMCE, NUMDE, NOMDE)
VALUES (30, 330, 'NUEVO3');
SELECT * FROM CENTROS;
SELECT * FROM DEPARTAMENTOS;
-- Borrado de datos
DELETE FROM SEDE_DEPARTAMENTOS WHERE NUMDE=310;
SELECT * FROM SEDE_DEPARTAMENTOS;
DELETE FROM SEDE_DEPARTAMENTOS WHERE NUMCE=30;
SELECT * FROM SEDE_DEPARTAMENTOS;
-- Modificación de datos
UPDATE SEDE_DEPARTAMENTOS
SET NOMDE='CUENTAS', TIDIR='F', NUMCE=20 WHERE NOMDE='FINANZAS';
SELECT * FROM DEPARTAMENTOS;
UPDATE SEDE_DEPARTAMENTOS
SET NOMDE='FINANZAS', TIDIR='P', NUMCE=10 WHERE NOMDE='CUENTAS';
SELECT * FROM DEPARTAMENTOS;